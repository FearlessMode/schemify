<?php
/**
 * Compatibility with The Events Calendar.
 *
 * Since The Events Calendar is already generating JSON-LD data, Schemify should only be used to
 * supplement the information, not replace it.
 *
 * @link https://wordpress.org/plugins/the-events-calendar/
 *
 * @package Schemify
 */

namespace Schemify\Compat\TheEventsCalendar;

use Schemify\Core as Core;

/**
 * Enable Schemify for the "tribe_events" post type.
 */
function enable_schemify() {
	add_post_type_support( 'tribe_events', 'schemify' );
}
add_action( 'init', __NAMESPACE__ . '\enable_schemify', 100 );

/**
 * Merge Schemify data with that generated by The Events Calendar, yielding to The Events Calendar
 * in the event of a conflict.
 *
 * @param object  $event The schema, as constructed by The Events Calendar.
 * @param array   $args  The arguments used by The Events Calendar to construct the data. Will not
 *                       be used in this function.
 * @param WP_Post $post  The post object being represented by the schema.
 * @return object The $data array, supplemented with Schemify content.
 */
function merge_schema_data( $event, $args, $post ) {
	$schema = Core\build_object( $post->ID );

	return (object) array_merge( (array) $schema, (array) $event );
}
add_filter( 'tribe_json_ld_event_object', __NAMESPACE__ . '\merge_schema_data', 10, 3 );

/**
 * When the tribe_json_ld_{$type}_data filter is called, that's the last step before The Events
 * Calendar is going to render their JSON-LD block.
 */
add_filter( 'tribe_json_ld_event_data', 'Schemify\Theme\bypass_schemify' );
